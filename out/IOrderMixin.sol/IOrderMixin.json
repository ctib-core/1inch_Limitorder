{"abi":[{"type":"function","name":"cancelOrder","inputs":[{"name":"order","type":"tuple","internalType":"struct OrderLib.Order","components":[{"name":"salt","type":"uint256","internalType":"uint256"},{"name":"makerAsset","type":"address","internalType":"address"},{"name":"takerAsset","type":"address","internalType":"address"},{"name":"maker","type":"address","internalType":"address"},{"name":"receiver","type":"address","internalType":"address"},{"name":"allowedSender","type":"address","internalType":"address"},{"name":"makingAmount","type":"uint256","internalType":"uint256"},{"name":"takingAmount","type":"uint256","internalType":"uint256"},{"name":"offsets","type":"uint256","internalType":"uint256"},{"name":"interactions","type":"bytes","internalType":"bytes"}]}],"outputs":[{"name":"orderRemaining","type":"uint256","internalType":"uint256"},{"name":"orderHash","type":"bytes32","internalType":"bytes32"}],"stateMutability":"nonpayable"},{"type":"function","name":"checkPredicate","inputs":[{"name":"order","type":"tuple","internalType":"struct OrderLib.Order","components":[{"name":"salt","type":"uint256","internalType":"uint256"},{"name":"makerAsset","type":"address","internalType":"address"},{"name":"takerAsset","type":"address","internalType":"address"},{"name":"maker","type":"address","internalType":"address"},{"name":"receiver","type":"address","internalType":"address"},{"name":"allowedSender","type":"address","internalType":"address"},{"name":"makingAmount","type":"uint256","internalType":"uint256"},{"name":"takingAmount","type":"uint256","internalType":"uint256"},{"name":"offsets","type":"uint256","internalType":"uint256"},{"name":"interactions","type":"bytes","internalType":"bytes"}]}],"outputs":[{"name":"result","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"fillOrder","inputs":[{"name":"order","type":"tuple","internalType":"struct OrderLib.Order","components":[{"name":"salt","type":"uint256","internalType":"uint256"},{"name":"makerAsset","type":"address","internalType":"address"},{"name":"takerAsset","type":"address","internalType":"address"},{"name":"maker","type":"address","internalType":"address"},{"name":"receiver","type":"address","internalType":"address"},{"name":"allowedSender","type":"address","internalType":"address"},{"name":"makingAmount","type":"uint256","internalType":"uint256"},{"name":"takingAmount","type":"uint256","internalType":"uint256"},{"name":"offsets","type":"uint256","internalType":"uint256"},{"name":"interactions","type":"bytes","internalType":"bytes"}]},{"name":"signature","type":"bytes","internalType":"bytes"},{"name":"interaction","type":"bytes","internalType":"bytes"},{"name":"makingAmount","type":"uint256","internalType":"uint256"},{"name":"takingAmount","type":"uint256","internalType":"uint256"},{"name":"skipPermitAndThresholdAmount","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"actualMakingAmount","type":"uint256","internalType":"uint256"},{"name":"actualTakingAmount","type":"uint256","internalType":"uint256"},{"name":"orderHash","type":"bytes32","internalType":"bytes32"}],"stateMutability":"payable"},{"type":"function","name":"fillOrderTo","inputs":[{"name":"order_","type":"tuple","internalType":"struct OrderLib.Order","components":[{"name":"salt","type":"uint256","internalType":"uint256"},{"name":"makerAsset","type":"address","internalType":"address"},{"name":"takerAsset","type":"address","internalType":"address"},{"name":"maker","type":"address","internalType":"address"},{"name":"receiver","type":"address","internalType":"address"},{"name":"allowedSender","type":"address","internalType":"address"},{"name":"makingAmount","type":"uint256","internalType":"uint256"},{"name":"takingAmount","type":"uint256","internalType":"uint256"},{"name":"offsets","type":"uint256","internalType":"uint256"},{"name":"interactions","type":"bytes","internalType":"bytes"}]},{"name":"signature","type":"bytes","internalType":"bytes"},{"name":"interaction","type":"bytes","internalType":"bytes"},{"name":"makingAmount","type":"uint256","internalType":"uint256"},{"name":"takingAmount","type":"uint256","internalType":"uint256"},{"name":"skipPermitAndThresholdAmount","type":"uint256","internalType":"uint256"},{"name":"target","type":"address","internalType":"address"}],"outputs":[{"name":"actualMakingAmount","type":"uint256","internalType":"uint256"},{"name":"actualTakingAmount","type":"uint256","internalType":"uint256"},{"name":"orderHash","type":"bytes32","internalType":"bytes32"}],"stateMutability":"payable"},{"type":"function","name":"fillOrderToWithPermit","inputs":[{"name":"order","type":"tuple","internalType":"struct OrderLib.Order","components":[{"name":"salt","type":"uint256","internalType":"uint256"},{"name":"makerAsset","type":"address","internalType":"address"},{"name":"takerAsset","type":"address","internalType":"address"},{"name":"maker","type":"address","internalType":"address"},{"name":"receiver","type":"address","internalType":"address"},{"name":"allowedSender","type":"address","internalType":"address"},{"name":"makingAmount","type":"uint256","internalType":"uint256"},{"name":"takingAmount","type":"uint256","internalType":"uint256"},{"name":"offsets","type":"uint256","internalType":"uint256"},{"name":"interactions","type":"bytes","internalType":"bytes"}]},{"name":"signature","type":"bytes","internalType":"bytes"},{"name":"interaction","type":"bytes","internalType":"bytes"},{"name":"makingAmount","type":"uint256","internalType":"uint256"},{"name":"takingAmount","type":"uint256","internalType":"uint256"},{"name":"skipPermitAndThresholdAmount","type":"uint256","internalType":"uint256"},{"name":"target","type":"address","internalType":"address"},{"name":"permit","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"actualMakingAmount","type":"uint256","internalType":"uint256"},{"name":"actualTakingAmount","type":"uint256","internalType":"uint256"},{"name":"orderHash","type":"bytes32","internalType":"bytes32"}],"stateMutability":"nonpayable"},{"type":"function","name":"hashOrder","inputs":[{"name":"order","type":"tuple","internalType":"struct OrderLib.Order","components":[{"name":"salt","type":"uint256","internalType":"uint256"},{"name":"makerAsset","type":"address","internalType":"address"},{"name":"takerAsset","type":"address","internalType":"address"},{"name":"maker","type":"address","internalType":"address"},{"name":"receiver","type":"address","internalType":"address"},{"name":"allowedSender","type":"address","internalType":"address"},{"name":"makingAmount","type":"uint256","internalType":"uint256"},{"name":"takingAmount","type":"uint256","internalType":"uint256"},{"name":"offsets","type":"uint256","internalType":"uint256"},{"name":"interactions","type":"bytes","internalType":"bytes"}]}],"outputs":[{"name":"orderHash","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"remaining","inputs":[{"name":"orderHash","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"amount","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"remainingRaw","inputs":[{"name":"orderHash","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"rawAmount","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"remainingsRaw","inputs":[{"name":"orderHashes","type":"bytes32[]","internalType":"bytes32[]"}],"outputs":[{"name":"rawAmounts","type":"uint256[]","internalType":"uint256[]"}],"stateMutability":"view"},{"type":"function","name":"simulate","inputs":[{"name":"target","type":"address","internalType":"address"},{"name":"data","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"cancelOrder((uint256,address,address,address,address,address,uint256,uint256,uint256,bytes))":"2d9a56f6","checkPredicate((uint256,address,address,address,address,address,uint256,uint256,uint256,bytes))":"6c838250","fillOrder((uint256,address,address,address,address,address,uint256,uint256,uint256,bytes),bytes,bytes,uint256,uint256,uint256)":"62e238bb","fillOrderTo((uint256,address,address,address,address,address,uint256,uint256,uint256,bytes),bytes,bytes,uint256,uint256,uint256,address)":"e5d7bde6","fillOrderToWithPermit((uint256,address,address,address,address,address,uint256,uint256,uint256,bytes),bytes,bytes,uint256,uint256,uint256,address,bytes)":"d365c695","hashOrder((uint256,address,address,address,address,address,uint256,uint256,uint256,bytes))":"37e7316f","remaining(bytes32)":"bc1ed74c","remainingRaw(bytes32)":"7e54f092","remainingsRaw(bytes32[])":"942461bb","simulate(address,bytes)":"bd61951d"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"makerAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takerAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"allowedSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"makingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offsets\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"interactions\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderLib.Order\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"cancelOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"orderRemaining\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"makerAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takerAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"allowedSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"makingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offsets\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"interactions\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderLib.Order\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"checkPredicate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"makerAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takerAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"allowedSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"makingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offsets\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"interactions\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderLib.Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"interaction\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"makingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"skipPermitAndThresholdAmount\",\"type\":\"uint256\"}],\"name\":\"fillOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"actualMakingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actualTakingAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"makerAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takerAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"allowedSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"makingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offsets\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"interactions\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderLib.Order\",\"name\":\"order_\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"interaction\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"makingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"skipPermitAndThresholdAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"fillOrderTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"actualMakingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actualTakingAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"makerAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takerAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"allowedSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"makingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offsets\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"interactions\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderLib.Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"interaction\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"makingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"skipPermitAndThresholdAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"permit\",\"type\":\"bytes\"}],\"name\":\"fillOrderToWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"actualMakingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actualTakingAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"makerAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takerAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"allowedSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"makingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offsets\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"interactions\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderLib.Order\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"hashOrder\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"}],\"name\":\"remaining\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"}],\"name\":\"remainingRaw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"orderHashes\",\"type\":\"bytes32[]\"}],\"name\":\"remainingsRaw\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"rawAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"simulate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"cancelOrder((uint256,address,address,address,address,address,uint256,uint256,uint256,bytes))\":{\"details\":\"Order is cancelled by setting remaining amount to _ORDER_FILLED value\",\"params\":{\"order\":\"Order quote to cancel\"},\"returns\":{\"orderHash\":\"Hash of the filled order\",\"orderRemaining\":\"Unfilled amount of order before cancellation\"}},\"checkPredicate((uint256,address,address,address,address,address,uint256,uint256,uint256,bytes))\":{\"params\":{\"order\":\"Order to check predicate for\"},\"returns\":{\"result\":\"Predicate evaluation result. True if predicate allows to fill the order, false otherwise\"}},\"fillOrder((uint256,address,address,address,address,address,uint256,uint256,uint256,bytes),bytes,bytes,uint256,uint256,uint256)\":{\"params\":{\"interaction\":\"A call data for InteractiveNotificationReceiver. Taker may execute interaction after getting maker assets and before sending taker assets.\",\"makingAmount\":\"Making amount\",\"order\":\"Order quote to fill\",\"signature\":\"Signature to confirm quote ownership\",\"skipPermitAndThresholdAmount\":\"Specifies maximum allowed takingAmount when takingAmount is zero, otherwise specifies minimum allowed makingAmount. Top-most bit specifies whether taker wants to skip maker's permit.\",\"takingAmount\":\"Taking amount\"},\"returns\":{\"actualMakingAmount\":\"Actual amount transferred from maker to taker\",\"actualTakingAmount\":\"Actual amount transferred from taker to maker\",\"orderHash\":\"Hash of the filled order\"}},\"fillOrderTo((uint256,address,address,address,address,address,uint256,uint256,uint256,bytes),bytes,bytes,uint256,uint256,uint256,address)\":{\"params\":{\"interaction\":\"A call data for InteractiveNotificationReceiver. Taker may execute interaction after getting maker assets and before sending taker assets.\",\"makingAmount\":\"Making amount\",\"order_\":\"Order quote to fill\",\"signature\":\"Signature to confirm quote ownership\",\"skipPermitAndThresholdAmount\":\"Specifies maximum allowed takingAmount when takingAmount is zero, otherwise specifies minimum allowed makingAmount. Top-most bit specifies whether taker wants to skip maker's permit.\",\"takingAmount\":\"Taking amount\",\"target\":\"Address that will receive swap funds\"},\"returns\":{\"actualMakingAmount\":\"Actual amount transferred from maker to taker\",\"actualTakingAmount\":\"Actual amount transferred from taker to maker\",\"orderHash\":\"Hash of the filled order\"}},\"fillOrderToWithPermit((uint256,address,address,address,address,address,uint256,uint256,uint256,bytes),bytes,bytes,uint256,uint256,uint256,address,bytes)\":{\"details\":\"See tests for examples\",\"params\":{\"interaction\":\"A call data for InteractiveNotificationReceiver. Taker may execute interaction after getting maker assets and before sending taker assets.\",\"makingAmount\":\"Making amount\",\"order\":\"Order quote to fill\",\"permit\":\"Should consist of abiencoded token address and encoded `IERC20Permit.permit` call.\",\"signature\":\"Signature to confirm quote ownership\",\"skipPermitAndThresholdAmount\":\"Specifies maximum allowed takingAmount when takingAmount is zero, otherwise specifies minimum allowed makingAmount. Top-most bit specifies whether taker wants to skip maker's permit.\",\"takingAmount\":\"Taking amount\",\"target\":\"Address that will receive swap funds\"},\"returns\":{\"actualMakingAmount\":\"Actual amount transferred from maker to taker\",\"actualTakingAmount\":\"Actual amount transferred from taker to maker\",\"orderHash\":\"Hash of the filled order\"}},\"hashOrder((uint256,address,address,address,address,address,uint256,uint256,uint256,bytes))\":{\"params\":{\"order\":\"Order to get hash for\"},\"returns\":{\"orderHash\":\"Hash of the order\"}},\"remaining(bytes32)\":{\"params\":{\"orderHash\":\"Order's hash. Can be obtained by the `hashOrder` function\"},\"returns\":{\"amount\":\"Unfilled amount\"}},\"remainingRaw(bytes32)\":{\"params\":{\"orderHash\":\"Order's hash. Can be obtained by the `hashOrder` function\"},\"returns\":{\"rawAmount\":\"Unfilled amount of order plus one if order exists. Otherwise 0\"}},\"remainingsRaw(bytes32[])\":{\"params\":{\"orderHashes\":\"Array of hashes\"},\"returns\":{\"rawAmounts\":\"Array of amounts for each order plus one if order exists or 0 otherwise\"}},\"simulate(address,bytes)\":{\"details\":\"The function always reverts and returns the simulation results in revert data.\",\"params\":{\"data\":\"Data that will be passed to delegatee\",\"target\":\"Addresses that will be delegated\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"cancelOrder((uint256,address,address,address,address,address,uint256,uint256,uint256,bytes))\":{\"notice\":\"Cancels order.\"},\"checkPredicate((uint256,address,address,address,address,address,uint256,uint256,uint256,bytes))\":{\"notice\":\"Checks order predicate\"},\"fillOrder((uint256,address,address,address,address,address,uint256,uint256,uint256,bytes),bytes,bytes,uint256,uint256,uint256)\":{\"notice\":\"Fills an order. If one doesn't exist (first fill) it will be created using order.makerAssetData\"},\"fillOrderTo((uint256,address,address,address,address,address,uint256,uint256,uint256,bytes),bytes,bytes,uint256,uint256,uint256,address)\":{\"notice\":\"Same as `fillOrder` but allows to specify funds destination instead of `msg.sender`\"},\"fillOrderToWithPermit((uint256,address,address,address,address,address,uint256,uint256,uint256,bytes),bytes,bytes,uint256,uint256,uint256,address,bytes)\":{\"notice\":\"Same as `fillOrderTo` but calls permit first, allowing to approve token spending and make a swap in one transaction. Also allows to specify funds destination instead of `msg.sender`\"},\"hashOrder((uint256,address,address,address,address,address,uint256,uint256,uint256,bytes))\":{\"notice\":\"Returns order hash according to EIP712 standard\"},\"remaining(bytes32)\":{\"notice\":\"Returns unfilled amount for order. Throws if order does not exist\"},\"remainingRaw(bytes32)\":{\"notice\":\"Returns unfilled amount for order\"},\"remainingsRaw(bytes32[])\":{\"notice\":\"Same as `remainingRaw` but for multiple orders\"},\"simulate(address,bytes)\":{\"notice\":\"Delegates execution to custom implementation. Could be used to validate if `transferFrom` works properly\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/limit-order-protocol/contracts/interfaces/IOrderMixin.sol\":\"IOrderMixin\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@1inch/limit-order-protocol/=lib/limit-order-protocol/contracts/\",\":@1inch/solidity-utils/=lib/solidity-utils/\",\":@openzeppelin/=lib/openzeppelin-contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/openzeppelin-contracts/lib/forge-std/src/\",\":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":limit-order-protocol/=lib/limit-order-protocol/contracts/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":solidity-utils/=lib/solidity-utils/contracts/\"]},\"sources\":{\"lib/limit-order-protocol/contracts/OrderLib.sol\":{\"keccak256\":\"0xab2061d55a805571af15c8c041e3e14eb05468b66414de083ba4553ec1264ac3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ed6110180adf5557d9f0f4f9f2ea5c0b9beceb96363ea33c9dbdafe85e5d9a80\",\"dweb:/ipfs/QmbS7Qjms1EGWGM6SzXLxoWWLJVv1Qyrd2zEcG8K8vSb6c\"]},\"lib/limit-order-protocol/contracts/interfaces/IOrderMixin.sol\":{\"keccak256\":\"0x1d22a6b029e5138da51be85e411e051e80cdff1aab20f7d6a50e57b54dc774ee\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5d960d0e924583b242f61160a2d620195900821fc761b4bb000464b98d26d3d5\",\"dweb:/ipfs/QmZBXMFJhDkkiYSfveDWGmVgYS9bWrdjt95MKUYsRwvANR\"]},\"lib/openzeppelin-contracts/contracts/interfaces/IERC1271.sol\":{\"keccak256\":\"0x66c7ec42c6c43712be2107a50ab4529379bc76a632b425babec698d9da921ac6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://dce2778f0b638adfc5ba29c2c618c855fe725fa74a16846386aa1d56a834aa04\",\"dweb:/ipfs/QmPV9oWnzQdi58od266j62xvviavLNHqKLZfm6k2K1qy9E\"]},\"lib/solidity-utils/contracts/libraries/ECDSA.sol\":{\"keccak256\":\"0x501b8b300cf98af055d4bb26eb936ec8cb8aac7cde5caae9c2d045a43d15c5e5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d0e01d523289379a63174a8afecb82098e705ed5838e6e6e4e66f9e396d25a78\",\"dweb:/ipfs/QmYJWf52BFtop5272CA6n9aPtm8Q74nakeBCQgD1d8axF7\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.30+commit.73712a01"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"struct OrderLib.Order","name":"order","type":"tuple","components":[{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"address","name":"makerAsset","type":"address"},{"internalType":"address","name":"takerAsset","type":"address"},{"internalType":"address","name":"maker","type":"address"},{"internalType":"address","name":"receiver","type":"address"},{"internalType":"address","name":"allowedSender","type":"address"},{"internalType":"uint256","name":"makingAmount","type":"uint256"},{"internalType":"uint256","name":"takingAmount","type":"uint256"},{"internalType":"uint256","name":"offsets","type":"uint256"},{"internalType":"bytes","name":"interactions","type":"bytes"}]}],"stateMutability":"nonpayable","type":"function","name":"cancelOrder","outputs":[{"internalType":"uint256","name":"orderRemaining","type":"uint256"},{"internalType":"bytes32","name":"orderHash","type":"bytes32"}]},{"inputs":[{"internalType":"struct OrderLib.Order","name":"order","type":"tuple","components":[{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"address","name":"makerAsset","type":"address"},{"internalType":"address","name":"takerAsset","type":"address"},{"internalType":"address","name":"maker","type":"address"},{"internalType":"address","name":"receiver","type":"address"},{"internalType":"address","name":"allowedSender","type":"address"},{"internalType":"uint256","name":"makingAmount","type":"uint256"},{"internalType":"uint256","name":"takingAmount","type":"uint256"},{"internalType":"uint256","name":"offsets","type":"uint256"},{"internalType":"bytes","name":"interactions","type":"bytes"}]}],"stateMutability":"view","type":"function","name":"checkPredicate","outputs":[{"internalType":"bool","name":"result","type":"bool"}]},{"inputs":[{"internalType":"struct OrderLib.Order","name":"order","type":"tuple","components":[{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"address","name":"makerAsset","type":"address"},{"internalType":"address","name":"takerAsset","type":"address"},{"internalType":"address","name":"maker","type":"address"},{"internalType":"address","name":"receiver","type":"address"},{"internalType":"address","name":"allowedSender","type":"address"},{"internalType":"uint256","name":"makingAmount","type":"uint256"},{"internalType":"uint256","name":"takingAmount","type":"uint256"},{"internalType":"uint256","name":"offsets","type":"uint256"},{"internalType":"bytes","name":"interactions","type":"bytes"}]},{"internalType":"bytes","name":"signature","type":"bytes"},{"internalType":"bytes","name":"interaction","type":"bytes"},{"internalType":"uint256","name":"makingAmount","type":"uint256"},{"internalType":"uint256","name":"takingAmount","type":"uint256"},{"internalType":"uint256","name":"skipPermitAndThresholdAmount","type":"uint256"}],"stateMutability":"payable","type":"function","name":"fillOrder","outputs":[{"internalType":"uint256","name":"actualMakingAmount","type":"uint256"},{"internalType":"uint256","name":"actualTakingAmount","type":"uint256"},{"internalType":"bytes32","name":"orderHash","type":"bytes32"}]},{"inputs":[{"internalType":"struct OrderLib.Order","name":"order_","type":"tuple","components":[{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"address","name":"makerAsset","type":"address"},{"internalType":"address","name":"takerAsset","type":"address"},{"internalType":"address","name":"maker","type":"address"},{"internalType":"address","name":"receiver","type":"address"},{"internalType":"address","name":"allowedSender","type":"address"},{"internalType":"uint256","name":"makingAmount","type":"uint256"},{"internalType":"uint256","name":"takingAmount","type":"uint256"},{"internalType":"uint256","name":"offsets","type":"uint256"},{"internalType":"bytes","name":"interactions","type":"bytes"}]},{"internalType":"bytes","name":"signature","type":"bytes"},{"internalType":"bytes","name":"interaction","type":"bytes"},{"internalType":"uint256","name":"makingAmount","type":"uint256"},{"internalType":"uint256","name":"takingAmount","type":"uint256"},{"internalType":"uint256","name":"skipPermitAndThresholdAmount","type":"uint256"},{"internalType":"address","name":"target","type":"address"}],"stateMutability":"payable","type":"function","name":"fillOrderTo","outputs":[{"internalType":"uint256","name":"actualMakingAmount","type":"uint256"},{"internalType":"uint256","name":"actualTakingAmount","type":"uint256"},{"internalType":"bytes32","name":"orderHash","type":"bytes32"}]},{"inputs":[{"internalType":"struct OrderLib.Order","name":"order","type":"tuple","components":[{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"address","name":"makerAsset","type":"address"},{"internalType":"address","name":"takerAsset","type":"address"},{"internalType":"address","name":"maker","type":"address"},{"internalType":"address","name":"receiver","type":"address"},{"internalType":"address","name":"allowedSender","type":"address"},{"internalType":"uint256","name":"makingAmount","type":"uint256"},{"internalType":"uint256","name":"takingAmount","type":"uint256"},{"internalType":"uint256","name":"offsets","type":"uint256"},{"internalType":"bytes","name":"interactions","type":"bytes"}]},{"internalType":"bytes","name":"signature","type":"bytes"},{"internalType":"bytes","name":"interaction","type":"bytes"},{"internalType":"uint256","name":"makingAmount","type":"uint256"},{"internalType":"uint256","name":"takingAmount","type":"uint256"},{"internalType":"uint256","name":"skipPermitAndThresholdAmount","type":"uint256"},{"internalType":"address","name":"target","type":"address"},{"internalType":"bytes","name":"permit","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"fillOrderToWithPermit","outputs":[{"internalType":"uint256","name":"actualMakingAmount","type":"uint256"},{"internalType":"uint256","name":"actualTakingAmount","type":"uint256"},{"internalType":"bytes32","name":"orderHash","type":"bytes32"}]},{"inputs":[{"internalType":"struct OrderLib.Order","name":"order","type":"tuple","components":[{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"address","name":"makerAsset","type":"address"},{"internalType":"address","name":"takerAsset","type":"address"},{"internalType":"address","name":"maker","type":"address"},{"internalType":"address","name":"receiver","type":"address"},{"internalType":"address","name":"allowedSender","type":"address"},{"internalType":"uint256","name":"makingAmount","type":"uint256"},{"internalType":"uint256","name":"takingAmount","type":"uint256"},{"internalType":"uint256","name":"offsets","type":"uint256"},{"internalType":"bytes","name":"interactions","type":"bytes"}]}],"stateMutability":"view","type":"function","name":"hashOrder","outputs":[{"internalType":"bytes32","name":"orderHash","type":"bytes32"}]},{"inputs":[{"internalType":"bytes32","name":"orderHash","type":"bytes32"}],"stateMutability":"view","type":"function","name":"remaining","outputs":[{"internalType":"uint256","name":"amount","type":"uint256"}]},{"inputs":[{"internalType":"bytes32","name":"orderHash","type":"bytes32"}],"stateMutability":"view","type":"function","name":"remainingRaw","outputs":[{"internalType":"uint256","name":"rawAmount","type":"uint256"}]},{"inputs":[{"internalType":"bytes32[]","name":"orderHashes","type":"bytes32[]"}],"stateMutability":"view","type":"function","name":"remainingsRaw","outputs":[{"internalType":"uint256[]","name":"rawAmounts","type":"uint256[]"}]},{"inputs":[{"internalType":"address","name":"target","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"simulate"}],"devdoc":{"kind":"dev","methods":{"cancelOrder((uint256,address,address,address,address,address,uint256,uint256,uint256,bytes))":{"details":"Order is cancelled by setting remaining amount to _ORDER_FILLED value","params":{"order":"Order quote to cancel"},"returns":{"orderHash":"Hash of the filled order","orderRemaining":"Unfilled amount of order before cancellation"}},"checkPredicate((uint256,address,address,address,address,address,uint256,uint256,uint256,bytes))":{"params":{"order":"Order to check predicate for"},"returns":{"result":"Predicate evaluation result. True if predicate allows to fill the order, false otherwise"}},"fillOrder((uint256,address,address,address,address,address,uint256,uint256,uint256,bytes),bytes,bytes,uint256,uint256,uint256)":{"params":{"interaction":"A call data for InteractiveNotificationReceiver. Taker may execute interaction after getting maker assets and before sending taker assets.","makingAmount":"Making amount","order":"Order quote to fill","signature":"Signature to confirm quote ownership","skipPermitAndThresholdAmount":"Specifies maximum allowed takingAmount when takingAmount is zero, otherwise specifies minimum allowed makingAmount. Top-most bit specifies whether taker wants to skip maker's permit.","takingAmount":"Taking amount"},"returns":{"actualMakingAmount":"Actual amount transferred from maker to taker","actualTakingAmount":"Actual amount transferred from taker to maker","orderHash":"Hash of the filled order"}},"fillOrderTo((uint256,address,address,address,address,address,uint256,uint256,uint256,bytes),bytes,bytes,uint256,uint256,uint256,address)":{"params":{"interaction":"A call data for InteractiveNotificationReceiver. Taker may execute interaction after getting maker assets and before sending taker assets.","makingAmount":"Making amount","order_":"Order quote to fill","signature":"Signature to confirm quote ownership","skipPermitAndThresholdAmount":"Specifies maximum allowed takingAmount when takingAmount is zero, otherwise specifies minimum allowed makingAmount. Top-most bit specifies whether taker wants to skip maker's permit.","takingAmount":"Taking amount","target":"Address that will receive swap funds"},"returns":{"actualMakingAmount":"Actual amount transferred from maker to taker","actualTakingAmount":"Actual amount transferred from taker to maker","orderHash":"Hash of the filled order"}},"fillOrderToWithPermit((uint256,address,address,address,address,address,uint256,uint256,uint256,bytes),bytes,bytes,uint256,uint256,uint256,address,bytes)":{"details":"See tests for examples","params":{"interaction":"A call data for InteractiveNotificationReceiver. Taker may execute interaction after getting maker assets and before sending taker assets.","makingAmount":"Making amount","order":"Order quote to fill","permit":"Should consist of abiencoded token address and encoded `IERC20Permit.permit` call.","signature":"Signature to confirm quote ownership","skipPermitAndThresholdAmount":"Specifies maximum allowed takingAmount when takingAmount is zero, otherwise specifies minimum allowed makingAmount. Top-most bit specifies whether taker wants to skip maker's permit.","takingAmount":"Taking amount","target":"Address that will receive swap funds"},"returns":{"actualMakingAmount":"Actual amount transferred from maker to taker","actualTakingAmount":"Actual amount transferred from taker to maker","orderHash":"Hash of the filled order"}},"hashOrder((uint256,address,address,address,address,address,uint256,uint256,uint256,bytes))":{"params":{"order":"Order to get hash for"},"returns":{"orderHash":"Hash of the order"}},"remaining(bytes32)":{"params":{"orderHash":"Order's hash. Can be obtained by the `hashOrder` function"},"returns":{"amount":"Unfilled amount"}},"remainingRaw(bytes32)":{"params":{"orderHash":"Order's hash. Can be obtained by the `hashOrder` function"},"returns":{"rawAmount":"Unfilled amount of order plus one if order exists. Otherwise 0"}},"remainingsRaw(bytes32[])":{"params":{"orderHashes":"Array of hashes"},"returns":{"rawAmounts":"Array of amounts for each order plus one if order exists or 0 otherwise"}},"simulate(address,bytes)":{"details":"The function always reverts and returns the simulation results in revert data.","params":{"data":"Data that will be passed to delegatee","target":"Addresses that will be delegated"}}},"version":1},"userdoc":{"kind":"user","methods":{"cancelOrder((uint256,address,address,address,address,address,uint256,uint256,uint256,bytes))":{"notice":"Cancels order."},"checkPredicate((uint256,address,address,address,address,address,uint256,uint256,uint256,bytes))":{"notice":"Checks order predicate"},"fillOrder((uint256,address,address,address,address,address,uint256,uint256,uint256,bytes),bytes,bytes,uint256,uint256,uint256)":{"notice":"Fills an order. If one doesn't exist (first fill) it will be created using order.makerAssetData"},"fillOrderTo((uint256,address,address,address,address,address,uint256,uint256,uint256,bytes),bytes,bytes,uint256,uint256,uint256,address)":{"notice":"Same as `fillOrder` but allows to specify funds destination instead of `msg.sender`"},"fillOrderToWithPermit((uint256,address,address,address,address,address,uint256,uint256,uint256,bytes),bytes,bytes,uint256,uint256,uint256,address,bytes)":{"notice":"Same as `fillOrderTo` but calls permit first, allowing to approve token spending and make a swap in one transaction. Also allows to specify funds destination instead of `msg.sender`"},"hashOrder((uint256,address,address,address,address,address,uint256,uint256,uint256,bytes))":{"notice":"Returns order hash according to EIP712 standard"},"remaining(bytes32)":{"notice":"Returns unfilled amount for order. Throws if order does not exist"},"remainingRaw(bytes32)":{"notice":"Returns unfilled amount for order"},"remainingsRaw(bytes32[])":{"notice":"Same as `remainingRaw` but for multiple orders"},"simulate(address,bytes)":{"notice":"Delegates execution to custom implementation. Could be used to validate if `transferFrom` works properly"}},"version":1}},"settings":{"remappings":["@1inch/limit-order-protocol/=lib/limit-order-protocol/contracts/","@1inch/solidity-utils/=lib/solidity-utils/","@openzeppelin/=lib/openzeppelin-contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/openzeppelin-contracts/lib/forge-std/src/","halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/","limit-order-protocol/=lib/limit-order-protocol/contracts/","openzeppelin-contracts/=lib/openzeppelin-contracts/","solidity-utils/=lib/solidity-utils/contracts/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"lib/limit-order-protocol/contracts/interfaces/IOrderMixin.sol":"IOrderMixin"},"evmVersion":"cancun","libraries":{}},"sources":{"lib/limit-order-protocol/contracts/OrderLib.sol":{"keccak256":"0xab2061d55a805571af15c8c041e3e14eb05468b66414de083ba4553ec1264ac3","urls":["bzz-raw://ed6110180adf5557d9f0f4f9f2ea5c0b9beceb96363ea33c9dbdafe85e5d9a80","dweb:/ipfs/QmbS7Qjms1EGWGM6SzXLxoWWLJVv1Qyrd2zEcG8K8vSb6c"],"license":"MIT"},"lib/limit-order-protocol/contracts/interfaces/IOrderMixin.sol":{"keccak256":"0x1d22a6b029e5138da51be85e411e051e80cdff1aab20f7d6a50e57b54dc774ee","urls":["bzz-raw://5d960d0e924583b242f61160a2d620195900821fc761b4bb000464b98d26d3d5","dweb:/ipfs/QmZBXMFJhDkkiYSfveDWGmVgYS9bWrdjt95MKUYsRwvANR"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/interfaces/IERC1271.sol":{"keccak256":"0x66c7ec42c6c43712be2107a50ab4529379bc76a632b425babec698d9da921ac6","urls":["bzz-raw://dce2778f0b638adfc5ba29c2c618c855fe725fa74a16846386aa1d56a834aa04","dweb:/ipfs/QmPV9oWnzQdi58od266j62xvviavLNHqKLZfm6k2K1qy9E"],"license":"MIT"},"lib/solidity-utils/contracts/libraries/ECDSA.sol":{"keccak256":"0x501b8b300cf98af055d4bb26eb936ec8cb8aac7cde5caae9c2d045a43d15c5e5","urls":["bzz-raw://d0e01d523289379a63174a8afecb82098e705ed5838e6e6e4e66f9e396d25a78","dweb:/ipfs/QmYJWf52BFtop5272CA6n9aPtm8Q74nakeBCQgD1d8axF7"],"license":"MIT"}},"version":1},"id":1}